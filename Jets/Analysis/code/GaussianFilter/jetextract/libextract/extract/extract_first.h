// -*- mode: c++; -*-

#ifndef EXTRACT_EXTRACT_H_
#define EXTRACT_EXTRACT_H_

// LinkDef files generated by rootcint do not include config.h
#if defined(__CINT__) || defined(G__DICTIONARY)
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif // HAVE_CONFIG_H
#endif // defined(__CINT__) || defined(G__DICTIONARY)

#include <cmath>
#include <climits>
#include <iostream>
#include <vector>

#include <getClass.h>
#include <Fun4AllServer.h>
#include <Fun4AllInputManager.h>
#include <SubsysReco.h>
#include <RunHeader.h>
#include <EventHeader.h>
#include <TrigLvl1.h>
#include <PHGlobal.h>
#include <ReactionPlaneObject.h>
#include <RpSumXYObject.h>
#include <PHCentralTrack.h>
#include <emcClusterContainer.h>
#include <emcClusterContent.h>
#include <ErtOut.h>

#include <jetevent/xefio.h>
#include <jetrec/rec.h>
#if !(defined(__CINT__) || defined(G__DICTIONARY))
#include <jetstat/histogram.h>
#endif // !(defined(__CINT__) || defined(G__DICTIONARY))

class event_writer_first_t :
//#if defined(HAVE_ROOT) && !defined(NO_ROOTCINT)
//public TObject,
//#endif // defined(HAVE_ROOT) && !defined(NO_ROOTCINT)
	public SubsysReco
{
private:
	const bool _legacy;
	int _nevent;
	const int _collider_run_number;
	int _experiment_run_number;
	const jet::collisional_system_t _collisional_system;
	const char *_trigger;
	const char *_output_filename;
	jet::xef_file_t *_output_file;
	const unsigned int _mode;
		static const unsigned int nbin_centrality = 20;
		static const unsigned int nbin_supermodule_distance = 10;
		static const unsigned int nbin_vertex = 3;
		static const unsigned int nbin_edge_distance = 3;
		static const unsigned int nbin_log_fake_rejection = 1U << 4;
		static const unsigned int nbin_log_perp_or_energy = 1 << 7;
		static const unsigned int nbin_mode =
			jet::ert_hit_t::NTRIGGER_MODE + 2;
		static const unsigned int nbin_supermodule =
			6 * 3 * 6 + 2 * 4 * 8;
		static const unsigned int nbin_2x2 = 
			6 * 3 * 6 * 36 + 2 * 4 * 8 * 36;
		static const float pseudorapidity_min = -0.35F;
		static const float pseudorapidity_max = 0.35F;
		static const float azimuth_west_min = -3.0F / 16.0F * M_PI;
		static const float azimuth_west_max = 5.0F / 16.0F * M_PI;
		static const float azimuth_east_min = 11.0F / 16.0F * M_PI;
		static const float azimuth_east_max = -13.0F / 16.0F * M_PI;
	void *_ert_supermodule_histogram;
	void *_ert_4x4_histogram;
	void *_ert_2x2_histogram;
	void *_ert_supermodule_histogram_cluster;
	void *_ert_4x4_histogram_cluster;
	void *_ert_2x2_histogram_cluster;
	std::string _statistics_output_filename;
	FILE *_statistics_output_file;
	void fill_supermodule(
		const std::vector<jet::ert_hit_t> &ert_hit,
		const jet::event_t &event,
		const std::vector<jet::cluster_t> &cluster);
	void fill_supermodule_partial(
		const std::vector<jet::ert_hit_t> &ert_hit,
		const jet::event_t &event,
		const std::vector<jet::cluster_t> &cluster);
public:
	event_writer_first_t(
		const bool legacy, const char *output_filename,
		const char *statistics_output_filename,
		const int collider_run_number,
		const jet::collisional_system_t collisional_system,
		const char *trigger, const unsigned int mode);
	~event_writer_first_t(void);
	int Init(PHCompositeNode *top_node);
	int InitRun(PHCompositeNode *top_node);
	int process_event(PHCompositeNode *top_node);
	int End(PHCompositeNode *top_node);
	inline int Reset(PHCompositeNode *top_node)
	{
		return 0;
	}
//#if defined(HAVE_ROOT) && !defined(NO_ROOTCINT)
//	ClassDef(event_writer_t, 1);
//#endif // defined(HAVE_ROOT) && !defined(NO_ROOTCINT)
};

#endif // EXTRACT_EXTRACT_H_
