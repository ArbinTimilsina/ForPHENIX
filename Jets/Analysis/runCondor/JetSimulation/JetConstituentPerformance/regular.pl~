#!/usr/local/bin/perl                                                                                                                             
use strict;

my $segments = 20000;
print "\nRunning over $segments segments.\n\n";
sleep(1);

my $nevents = 500;
print "\nNumber of events in each segment is: $nevents\n\n";
sleep(1);

my $R = 0.2;
print "R-parameter is $R\n\n";
sleep(1);

my $minPt = 10.4;
print "Min pt is: $minPt (GeV/c)\n\n";
sleep(1);

my $ncPythia = 3.0;
my $minCfPythia = 0.0;
my $maxCfPythia = 1.0;
print "For truth: ncPythia>=$ncPythia, minCfPythia=$minCfPythia, maxCfPythia=$maxCfPythia\n\n";
sleep(1);

my $evntdir = "/direct/phenix+hhj/arbint/JetSimulation/JetConstituentPerformance/regular";
print "Writing out events to dir: $evntdir\n\n";
sleep(3);

my $ii = 0;
for($ii=8496;$ii<$segments;$ii++) {
    my $dir = "JetConstituentPerformance_$ii";
    print "\n************************************\n";
    print "Making directory $dir\n\n";
    system("cd $evntdir; rm -rf $dir; mkdir -p $dir");

#Set PYTHIA
    print "Setting PYTHIA\n\n";

#Create pythia.cfg
    system("cd $evntdir/$dir; echo \'roots 200\nproj p\ntarg p\nframe cms\npytune 100\' >> pythia.cfg");
    system("cd $evntdir/$dir; echo \'msel 0\nmsub 11 1\nmsub 12 1\nmsub 13 1\' >> pythia.cfg");
    system("cd $evntdir/$dir; echo \'msub 28 1\nmsub 53 1\nmsub 68 1\' >> pythia.cfg");

    #Min parton pt
    system("cd $evntdir/$dir; echo \'ckin 3 $minPt\' >> pythia.cfg");

    system("cd $evntdir/$dir; ln -sf /direct/phenix+u/arbint/Jets/Analysis/code/JetSimulation/simMacros/generateVertexForPP.C");
    system("cd $evntdir/$dir; echo \'#!/bin/csh\ncd $evntdir/$dir\' >> JetConstituentPerformance.cmd");
    system("cd $evntdir/$dir; echo \'root -l -q -b \"generateVertexForPP.C($nevents)\"\' >> JetConstituentPerformance.cmd");
    system("cd $evntdir/$dir; ln -sf /direct/phenix+u/arbint/Jets/Analysis/code/JetSimulation/simMacros/generatePythia.C");
    system("cd $evntdir/$dir; echo \'root -l -q -b \"generatePythia.C($R, $ncPythia, $minPt, $minCfPythia, $maxCfPythia, $nevents)\"\' >> JetConstituentPerformance.cmd");

    print "Creating glogon.kumac\n\n";
#Create glogon.kumac 
    system("cd $evntdir/$dir; echo \'phpythia 1 phpythia.root\nptrig $nevents\nexit\' > glogon.kumac");

#Set PISA
    print "Setting PISA\n";
    system("cd $evntdir/$dir; ln -sf /direct/phenix+u/arbint/Jets/Analysis/code/JetSimulation/simMacros/pisaLinker/* .");
    system("cd $evntdir/$dir; ln -sf /direct/phenix+u/arbint/Jets/Analysis/code/JetSimulation/simMacros/pisaToDSTLinker/* .");
    system("cd $evntdir/$dir; ln -sf /direct/phenix+u/arbint/Jets/Analysis/code/JetSimulation/simMacros/pcDeadArea/pad_deadroc_360934.dat pad_deadroc.dat");
    system("cd $evntdir/$dir; ln -sf /direct/phenix+u/arbint/Jets/Analysis/code/JetSimulation/simMacros/pcDeadArea/pad_deadch_360934.dat pad_deadch.dat");
    system("cd $evntdir/$dir; echo \'pisa <pisa.input\' >> JetConstituentPerformance.cmd");

#Set PISA to DST
    print "Setting PISA to DST\n\n";
    system("cd $evntdir/$dir; echo \'root -l -q -b \"pisaToDST.C($nevents, 360934)\"\' >> JetConstituentPerformance.cmd");

#Set the code
    print "Setting the code\n\n";
    system("cd $evntdir/$dir; ln -sf /direct/phenix+u/arbint/Jets/Analysis/code/JetSimulation/simMacros/runJetConstituentPerformance.C");
    system("cd $evntdir/$dir; echo \'root -l -q -b \"runJetConstituentPerformance.C($R, $minPt, $ncPythia, $minCfPythia, $maxCfPythia, 0.09, 0.04, $nevents)\"\' >> JetConstituentPerformance.cmd");

#Want to delete large files
    system("cd $evntdir/$dir; echo \'rm -rf dummyFile.root phpythia.root PISAEvent.root SimDST.root\' >> JetConstituentPerformance.cmd");
    system("cd $evntdir/$dir; echo \'rm -rf phpy_xsec.root gintphnx.hbk \' >> JetConstituentPerformance.cmd");

#Submit the job
    system("cd $evntdir/$dir; ln -sf /direct/phenix+u/arbint/Jets/Analysis/runCondor/JetSimulation/JetConstituentPerformance/JetConstituentPerformance.job");
    system("cd $evntdir/$dir; chmod a+x JetConstituentPerformance.cmd");
    system("cd $evntdir/$dir; condor_submit JetConstituentPerformance.job");

#Sleep for 5 seconds
    sleep(2);
}
